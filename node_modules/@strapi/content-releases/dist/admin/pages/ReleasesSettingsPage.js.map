{"version":3,"file":"ReleasesSettingsPage.js","sources":["../../../admin/src/pages/ReleasesSettingsPage.tsx"],"sourcesContent":["import {\n  Form,\n  Layouts,\n  Page,\n  useAPIErrorHandler,\n  isFetchError,\n  GradientBadge,\n  useNotification,\n  useField,\n  useRBAC,\n} from '@strapi/admin/strapi-admin';\nimport {\n  Button,\n  Combobox,\n  ComboboxOption,\n  Field,\n  Flex,\n  Grid,\n  Typography,\n} from '@strapi/design-system';\nimport { Check } from '@strapi/icons';\nimport { useIntl } from 'react-intl';\n\nimport { useTypedSelector } from '../modules/hooks';\nimport { useGetReleaseSettingsQuery, useUpdateReleaseSettingsMutation } from '../services/release';\nimport { getTimezones } from '../utils/time';\nimport { SETTINGS_SCHEMA } from '../validation/schemas';\n\nimport type { UpdateSettings } from '../../../shared/contracts/settings';\n\nconst ReleasesSettingsPage = () => {\n  const { formatMessage } = useIntl();\n  const { formatAPIError } = useAPIErrorHandler();\n  const { toggleNotification } = useNotification();\n  const { data, isLoading: isLoadingSettings } = useGetReleaseSettingsQuery();\n  const [updateReleaseSettings, { isLoading: isSubmittingForm }] =\n    useUpdateReleaseSettingsMutation();\n  const permissions = useTypedSelector(\n    (state) => state.admin_app.permissions['settings']?.['releases']\n  );\n  const {\n    allowedActions: { canUpdate },\n  } = useRBAC(permissions);\n\n  const { timezoneList } = getTimezones(new Date());\n\n  const handleSubmit = async (body: UpdateSettings.Request['body']) => {\n    const { defaultTimezone } = body;\n    const isBodyTimezoneValid = timezoneList.some((timezone) => timezone.value === defaultTimezone);\n    const newBody =\n      !defaultTimezone || !isBodyTimezoneValid ? { defaultTimezone: null } : { ...body };\n    try {\n      const response = await updateReleaseSettings(newBody);\n\n      if ('data' in response) {\n        toggleNotification({\n          type: 'success',\n          message: formatMessage({\n            id: 'content-releases.pages.Settings.releases.setting.default-timezone-notification-success',\n            defaultMessage: 'Default timezone updated.',\n          }),\n        });\n      } else if (isFetchError(response.error)) {\n        toggleNotification({\n          type: 'danger',\n          message: formatAPIError(response.error),\n        });\n      } else {\n        toggleNotification({\n          type: 'danger',\n          message: formatMessage({ id: 'notification.error', defaultMessage: 'An error occurred' }),\n        });\n      }\n    } catch (error) {\n      toggleNotification({\n        type: 'danger',\n        message: formatMessage({ id: 'notification.error', defaultMessage: 'An error occurred' }),\n      });\n    }\n  };\n\n  if (isLoadingSettings) {\n    return <Page.Loading />;\n  }\n\n  return (\n    <Layouts.Root>\n      <Page.Title>\n        {formatMessage(\n          { id: 'Settings.PageTitle', defaultMessage: 'Settings - {name}' },\n          {\n            name: 'Releases',\n          }\n        )}\n      </Page.Title>\n      <Page.Main aria-busy={isLoadingSettings} tabIndex={-1}>\n        <Form\n          method=\"PUT\"\n          initialValues={{\n            defaultTimezone: data?.data.defaultTimezone,\n          }}\n          onSubmit={handleSubmit}\n          validationSchema={SETTINGS_SCHEMA}\n        >\n          {({ modified, isSubmitting }: { modified: boolean; isSubmitting: boolean }) => {\n            return (\n              <>\n                <Layouts.Header\n                  primaryAction={\n                    canUpdate ? (\n                      <Button\n                        disabled={!modified || isSubmittingForm}\n                        loading={isSubmitting}\n                        startIcon={<Check />}\n                        type=\"submit\"\n                      >\n                        {formatMessage({\n                          id: 'global.save',\n                          defaultMessage: 'Save',\n                        })}\n                      </Button>\n                    ) : null\n                  }\n                  title={formatMessage({\n                    id: 'content-releases.pages.Settings.releases.title',\n                    defaultMessage: 'Releases',\n                  })}\n                  secondaryAction={\n                    <GradientBadge\n                      label={formatMessage({\n                        id: 'components.premiumFeature.title',\n                        defaultMessage: 'Premium feature',\n                      })}\n                    />\n                  }\n                  subtitle={formatMessage({\n                    id: 'content-releases.pages.Settings.releases.description',\n                    defaultMessage: 'Create and manage content updates',\n                  })}\n                />\n                <Layouts.Content>\n                  <Flex\n                    direction=\"column\"\n                    background=\"neutral0\"\n                    alignItems=\"stretch\"\n                    padding={6}\n                    gap={6}\n                    shadow=\"filterShadow\"\n                    hasRadius\n                  >\n                    <Typography variant=\"delta\" tag=\"h2\">\n                      {formatMessage({\n                        id: 'content-releases.pages.Settings.releases.preferences.title',\n                        defaultMessage: 'Preferences',\n                      })}\n                    </Typography>\n                    <Grid.Root>\n                      <Grid.Item col={6} s={12} direction=\"column\" alignItems=\"stretch\">\n                        <TimezoneDropdown />\n                      </Grid.Item>\n                    </Grid.Root>\n                  </Flex>\n                </Layouts.Content>\n              </>\n            );\n          }}\n        </Form>\n      </Page.Main>\n    </Layouts.Root>\n  );\n};\n\nconst TimezoneDropdown = () => {\n  const permissions = useTypedSelector(\n    (state) => state.admin_app.permissions['settings']?.['releases']\n  );\n  const {\n    allowedActions: { canUpdate },\n  } = useRBAC(permissions);\n  const { formatMessage } = useIntl();\n  const { timezoneList } = getTimezones(new Date());\n  const field = useField('defaultTimezone');\n  return (\n    <Field.Root\n      name=\"defaultTimezone\"\n      hint={formatMessage({\n        id: 'content-releases.pages.Settings.releases.timezone.hint',\n        defaultMessage: 'The timezone of every release can still be changed individually. ',\n      })}\n      error={field.error}\n    >\n      <Field.Label>\n        {formatMessage({\n          id: 'content-releases.pages.Settings.releases.timezone.label',\n          defaultMessage: 'Default timezone',\n        })}\n      </Field.Label>\n      <Combobox\n        autocomplete={{ type: 'list', filter: 'contains' }}\n        onChange={(value) => field.onChange('defaultTimezone', value)}\n        onTextValueChange={(value) => field.onChange('defaultTimezone', value)}\n        onClear={() => field.onChange('defaultTimezone', '')}\n        value={field.value}\n        disabled={!canUpdate}\n      >\n        {timezoneList.map((timezone) => (\n          <ComboboxOption key={timezone.value} value={timezone.value}>\n            {timezone.value.replace(/&/, ' ')}\n          </ComboboxOption>\n        ))}\n      </Combobox>\n      <Field.Hint />\n      <Field.Error />\n    </Field.Root>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * ProtectedSettingsPage\n * -----------------------------------------------------------------------------------------------*/\n\nexport const ProtectedReleasesSettingsPage = () => {\n  const permissions = useTypedSelector(\n    (state) => state.admin_app.permissions['settings']?.['releases']?.read\n  );\n\n  return (\n    <Page.Protect permissions={permissions}>\n      <ReleasesSettingsPage />\n    </Page.Protect>\n  );\n};\n"],"names":["ReleasesSettingsPage","formatMessage","useIntl","formatAPIError","useAPIErrorHandler","toggleNotification","useNotification","data","isLoading","isLoadingSettings","useGetReleaseSettingsQuery","updateReleaseSettings","isSubmittingForm","useUpdateReleaseSettingsMutation","permissions","useTypedSelector","state","admin_app","allowedActions","canUpdate","useRBAC","timezoneList","getTimezones","Date","handleSubmit","body","defaultTimezone","isBodyTimezoneValid","some","timezone","value","newBody","response","type","message","id","defaultMessage","isFetchError","error","_jsx","Page","Loading","_jsxs","Layouts","Root","Title","name","Main","aria-busy","tabIndex","Form","method","initialValues","onSubmit","validationSchema","SETTINGS_SCHEMA","modified","isSubmitting","_Fragment","Header","primaryAction","Button","disabled","loading","startIcon","Check","title","secondaryAction","GradientBadge","label","subtitle","Content","Flex","direction","background","alignItems","padding","gap","shadow","hasRadius","Typography","variant","tag","Grid","Item","col","s","TimezoneDropdown","field","useField","Field","hint","Label","Combobox","autocomplete","filter","onChange","onTextValueChange","onClear","map","ComboboxOption","replace","Hint","Error","ProtectedReleasesSettingsPage","read","Protect"],"mappings":"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"}